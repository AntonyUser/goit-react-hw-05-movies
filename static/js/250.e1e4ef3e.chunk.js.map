{"version":3,"file":"static/js/250.e1e4ef3e.chunk.js","mappings":"mOAEAA,EAAAA,GAAAA,SAAAA,QAAyB,6BACzB,IAAMC,EAAU,mCAEHC,EAAc,mCAAG,6GAEHF,EAAAA,GAAAA,IAAA,uCAA0CC,IAFvC,cAEpBE,EAFoB,yBAGnBA,EAASC,KAAKC,SAHK,gCAK1BC,QAAQC,IAAR,MAL0B,yDAAH,qDASdC,EAAY,mCAAG,WAAOC,EAASC,EAASC,GAAzB,gGAEDX,EAAAA,GAAAA,IAAA,kBACVS,GADU,OACAC,EAAU,WAAa,IADvB,OAEnBC,EAAU,WAAa,GAFJ,oBAGTV,IALU,cAElBE,EAFkB,yBAOjBA,EAASC,MAPQ,gCASxBE,QAAQC,IAAR,MATwB,yDAAH,yD,6ECqCzB,UA/CiB,WACf,IAAQE,GAAYG,EAAAA,EAAAA,MAAZH,QACR,GAAkCI,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACRL,GAAa,GACb,KACEP,EAAAA,EAAAA,GAAaC,GAAS,GAAM,GAAOY,MAAK,SAAAjB,GACtCa,EAAYb,EAAKkB,KAClB,GAKF,CAJC,MAAOJ,GACPC,EAASD,EACV,CAND,QAOEH,GAAa,EACd,CACF,GAAE,CAACN,KAGF,2BACGK,IAAa,iDACbE,EAASO,OAAS,GACjB,wBACGP,EAASQ,KAAI,SAAAC,GACZ,IAAQC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,aAAcC,EAAcH,EAAdG,UAC5B,OACE,2BACE,gBACEC,IAAG,yCAAoCF,GACvCG,IAAKJ,EACLK,MAAM,SAER,uBAAIL,KACJ,uCAAeE,OAPRF,EAUZ,OAGH,iDAEDR,GAASA,EAAMc,UAGrB,C","sources":["components/API/API.jsx","components/FilmCast/FilmCast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = 'f0b659a36af27a39ded78e96381ce721';\n\nexport const getTrendMovies = async () => {\n  try {\n    const response = await axios.get(`3/trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getMovieById = async (movieId, credits, reviews) => {\n  try {\n    const response = await axios.get(\n      `3/movie/${movieId}${credits ? '/credits' : ''}${\n        reviews ? '/reviews' : ''\n      }?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// export const getSearchingMovies = async query => {\n//   try {\n//     const response = await axios.get(\n//       `3/search/movie?api_key=${API_KEY}&query=${query}`\n//     );\n//     return response.data.results;\n//   } catch (err) {\n//     console.log(err);\n//   }\n// };\n","import { getMovieById } from 'components/API/API';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst FilmCast = () => {\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [filmCast, setFilmCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    try {\n      getMovieById(movieId, true, false).then(data => {\n        setFilmCast(data.cast);\n      });\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <p>Loading...please wait</p>}\n      {filmCast.length > 0 ? (\n        <ul>\n          {filmCast.map(actor => {\n            const { name, profile_path, character } = actor;\n            return (\n              <li key={name}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                  alt={name}\n                  width=\"200\"\n                />\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>Sorry, cast not found</p>\n      )}\n      {error && error.message}\n    </div>\n  );\n};\n\nexport default FilmCast;\n"],"names":["axios","API_KEY","getTrendMovies","response","data","results","console","log","getMovieById","movieId","credits","reviews","useParams","useState","isLoading","setIsLoading","filmCast","setFilmCast","error","setError","useEffect","then","cast","length","map","actor","name","profile_path","character","src","alt","width","message"],"sourceRoot":""}